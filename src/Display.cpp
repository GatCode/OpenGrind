#include <Definitions.h>
#include <Display.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

static const unsigned char PROGMEM cup[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0xC1, 0x80, 0x00, 0x01, 0x83, 0x83, 0x00, 0x00, 0x01,
    0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x00, 0x00, 0x01, 0x81, 0x83, 0x80, 0x00, 0x00, 0xC1,
    0xC1, 0x80, 0x00, 0x00, 0x60, 0xE0, 0xC0, 0x00, 0x00, 0x30, 0x60, 0x60, 0x00, 0x00, 0x30, 0x30,
    0x20, 0x00, 0x00, 0x30, 0x30, 0x20, 0x00, 0x00, 0x70, 0x60, 0xE0, 0x00, 0x00, 0xE0, 0xC1, 0xC0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xFF, 0xFF, 0xFF, 0xE0, 0x0F,
    0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xFE, 0x18, 0x0F, 0xFF, 0xFF, 0xFE, 0x08, 0x0F, 0xFF,
    0xFF, 0xFE, 0x08, 0x0F, 0xFF, 0xFF, 0xFE, 0x08, 0x0F, 0xFF, 0xFF, 0xFE, 0x08, 0x0F, 0xFF, 0xFF,
    0xFE, 0x08, 0x0F, 0xFF, 0xFF, 0xFE, 0x18, 0x0F, 0xFF, 0xFF, 0xFF, 0xF0, 0x0F, 0xFF, 0xFF, 0xF8,
    0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x0F, 0xFF, 0xFF, 0xF8, 0x00,
    0x0F, 0xFF, 0xFF, 0xF8, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x07, 0xFF, 0xFF, 0xF0, 0x00, 0x03,
    0xFF, 0xFF, 0xE0, 0x00, 0x01, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0xFF, 0xFF, 0xC0, 0x00, 0x00, 0x7F,
    0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

Display::Display() {
    display = new Adafruit_SSD1306(128, 64, &Wire, 4);

    if(!display->begin(SSD1306_SWITCHCAPVCC, DISPLAY_ADDR)) {
        for(;;);
    }

    display->cp437(true);
    display->clearDisplay();
    display->display();
}

void Display::printSingleDose() {
    display->clearDisplay();
    display->drawBitmap(
        (display->width()  - 40 ) / 2,
        (display->height() - 40) / 2,
        cup, 40, 40, 1);
    display->display();
}

void Display::printDoubleDose() {
    display->clearDisplay();
    display->drawBitmap(
        (display->width()  - 94 ) / 2,
        (display->height() - 40) / 2,
        cup, 40, 40, 1);
    display->drawBitmap(
        (display->width() + 14 ) / 2,
        (display->height() - 40) / 2,
        cup, 40, 40, 1);
    display->display();
}

void Display::printManualMode(double time){
    display->clearDisplay();
    display->setTextColor(WHITE);
    display->setTextSize(2);
    display->setCursor(30,10);
    display->print("Manual");
    display->println();
    time = time < 0 ? 0.0 : time;
    time = time < 100 ? time : 99.9;
    display->setCursor(34,34);
    display->print(time, time < 10 ? 2 : 1);

    display->setTextSize(2);
    display->setCursor(90, 34);
    display->print("s");

    display->println();
    display->display();
}

void Display::printTime(double time) {
    display->clearDisplay();

    display->setTextColor(WHITE);
    display->setTextSize(4);
    display->setCursor(10, 20);
    time = time < 0 ? 0.0 : time;
    time = time < 100 ? time : 99.9;
    display->print(time, time < 10 ? 2 : 1);

    display->setTextSize(2);
    display->setCursor(110, 34);
    display->print("S");

    display->println();
    display->display();
}

void Display::printStatistics(int numberSingles, int numberDoubles) {
    display->clearDisplay();

    display->setTextColor(WHITE);
    display->setTextSize(2);
    display->setCursor(10, 16);
    display->print("#S:");
    display->setCursor(50, 16);
    display->print(numberSingles);

    display->setCursor(10, 36);
    display->print("#D:");
    display->setCursor(50, 36);
    display->print(numberDoubles);

    display->println();
    display->display();
}
